import os
import shutil
from jinja2 import Environment, FileSystemLoader
import markdown
import yaml

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –∏—Ö –º–µ–Ω—è—Ç—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
CONTENT_PATH = 'content'
TEMPLATE_PATH = 'templates'
STATIC_PATH = 'static'
OUTPUT_PATH = 'output'

# --- –®–ê–ì 1: –û–ß–ò–°–¢–ö–ê –ü–†–ï–î–´–î–£–©–ï–ô –í–ï–†–°–ò–ò ---
# –ü–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å–±–æ—Ä–∫–æ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É output, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º—É—Å–æ—Ä–∞
print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ —Å–∞–π—Ç–∞...")
if os.path.exists(OUTPUT_PATH):
    shutil.rmtree(OUTPUT_PATH)
os.makedirs(OUTPUT_PATH) # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É output

# --- –®–ê–ì 2: –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í ---
# –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —à—Ä–∏—Ñ—Ç—ã –≤ –ø–∞–ø–∫—É output
print("üé® –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫...")
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ static —Ç–µ–ø–µ—Ä—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, —á—Ç–æ –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
shutil.copytree(STATIC_PATH, os.path.join(OUTPUT_PATH, 'static'))

# --- –®–ê–ì 3: –ù–ê–°–¢–†–û–ô–ö–ê –®–ê–ë–õ–û–ù–ò–ó–ê–¢–û–†–ê JINJA2 ---
# –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Jinja2 –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É, –≥–¥–µ –ª–µ–∂–∞—Ç –Ω–∞—à–∏ HTML-—à–∞–±–ª–æ–Ω—ã
env = Environment(loader=FileSystemLoader(TEMPLATE_PATH))

# --- –®–ê–ì 4: –ó–ê–ì–†–£–ó–ö–ê –í–°–ï–• –î–ê–ù–ù–´–• ---
print("üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–µ—Ö–Ω–∏–∫...")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ YAML
with open(os.path.join(CONTENT_PATH, 'structure.yml'), 'r', encoding='utf-8') as f:
    structure_data = yaml.safe_load(f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ content/techniques
techniques_data = {} # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫
techniques_path = os.path.join(CONTENT_PATH, 'techniques')
for filename in os.listdir(techniques_path):
    if filename.endswith('.md'):
        # –ü–æ–ª—É—á–∞–µ–º id —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'svidetel-ne-sudya')
        technique_id = filename.replace('.md', '')
        filepath = os.path.join(techniques_path, filename)
        
        with open(filepath, 'r', encoding='utf-8') as f:
            # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–º–µ–∂–¥—É '---') –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            content_raw = f.read()
            parts = content_raw.split('---', 2)
            metadata_raw = parts[1]
            content_md = parts[2]
            
            # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
            metadata = yaml.safe_load(metadata_raw)
            # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Markdown –≤ HTML
            content_html = markdown.markdown(content_md)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Ö–Ω–∏–∫–µ –≤ –Ω–∞—à —Å–ª–æ–≤–∞—Ä—å
            techniques_data[technique_id] = {
                'id': technique_id,
                'title': metadata.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'subtitle': metadata.get('subtitle', ''),
                'icon': metadata.get('icon', ''),
                'content': content_html
            }

# --- –®–ê–ì 5: –ì–ï–ù–ï–†–ê–¶–ò–Ø HTML-–°–¢–†–ê–ù–ò–¶ ---
print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü...")

# 5.1. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (index.html)
template = env.get_template('index.html') # –ë–µ—Ä–µ–º —à–∞–±–ª–æ–Ω
# –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã–µ –æ "–±–æ–ª—è—Ö"
output_content = template.render(pains=structure_data['pains']) 
# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ñ–∞–π–ª
with open(os.path.join(OUTPUT_PATH, 'index.html'), 'w', encoding='utf-8') as f:
    f.write(output_content)
print("  - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞.")

# 5.2. –°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π "–±–æ–ª–µ–π"
template = env.get_template('pain_category.html') # –ë–µ—Ä–µ–º –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω
for pain in structure_data['pains']:
    pain_id = pain['id']
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ –µ–µ —Ç–µ—Ö–Ω–∏–∫–∞—Ö
    category_techniques = []
    for tech_id in pain['techniques']:
        if tech_id in techniques_data:
            category_techniques.append(techniques_data[tech_id])

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    output_content = template.render(pain=pain, techniques=category_techniques)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'output/verdikt/') –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞ —Ñ–∞–π–ª index.html
    os.makedirs(os.path.join(OUTPUT_PATH, pain_id), exist_ok=True)
    with open(os.path.join(OUTPUT_PATH, pain_id, 'index.html'), 'w', encoding='utf-8') as f:
        f.write(output_content)
    print(f"  - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{pain_id}' —Å–æ–∑–¥–∞–Ω–∞.")

# 5.3. –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–º–∏—Ö —Ç–µ—Ö–Ω–∏–∫
template = env.get_template('technique.html') # –ë–µ—Ä–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏
for tech_id, technique in techniques_data.items():
    output_content = template.render(technique=technique)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'output/techniques/svidetel-ne-sudya/') –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    os.makedirs(os.path.join(OUTPUT_PATH, 'techniques', tech_id), exist_ok=True)
    with open(os.path.join(OUTPUT_PATH, 'techniques', tech_id, 'index.html'), 'w', encoding='utf-8') as f:
        f.write(output_content)
    print(f"  - –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Ö–Ω–∏–∫–∏ '{tech_id}' —Å–æ–∑–¥–∞–Ω–∞.")

print("\n‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ì–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'output'.")